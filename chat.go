package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
)

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket ---
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		// –í –ø—Ä–æ–¥–µ –æ–≥—Ä–∞–Ω–∏—á—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏!
		return true
	},
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
type Message struct {
	Username  string `json:"username"`
	PhotoURL  string `json:"photo_url"`
	Text      string `json:"text"`
	Timestamp string `json:"timestamp"`
	// –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—á–∞—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è)
	Type string `json:"type"`
}

// –ö–ª–∏–µ–Ω—Ç
type Client struct {
	conn *websocket.Conn
	send chan []byte
	user UserData // –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Ç–∞
type ChatHub struct {
	clients    map[*Client]bool
	broadcast  chan []byte
	register   chan *Client
	unregister chan *Client
	// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
	history []Message
	// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö–∞–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
	profileUpdate chan string // –ö–∞–Ω–∞–ª –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ Email
}

var hub = ChatHub{
	clients:       make(map[*Client]bool),
	broadcast:     make(chan []byte),
	register:      make(chan *Client),
	unregister:    make(chan *Client),
	history:       make([]Message, 0), // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
	profileUpdate: make(chan string),
}

// --- –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ö–∞–±–∞ ---
func (h *ChatHub) run() {
	for {
		select {
		case client := <-h.register:
			h.clients[client] = true
			log.Printf("üë§ %s –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É (Email: %s)", client.user.Username, client.user.Email)

			// ‚úÖ –û–¢–ü–†–ê–í–ö–ê –ò–°–¢–û–†–ò–ò –ù–û–í–û–ú–£ –ö–õ–ò–ï–ù–¢–£
			if len(h.history) > 0 {
				historyMsg, _ := json.Marshal(map[string]interface{}{
					"type": "history",
					"data": h.history,
				})
				client.send <- historyMsg
			}

		case client := <-h.unregister:
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				close(client.send)
				log.Printf("üö™ %s –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞", client.user.Username)
			}

		case message := <-h.broadcast:
			// ‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ
			var msg Message
			if err := json.Unmarshal(message, &msg); err == nil && msg.Type == "chat" {
				h.history = append(h.history, msg)
				// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
				if len(h.history) > 100 {
					h.history = h.history[1:]
				}
			}

			// –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
			for client := range h.clients {
				select {
				case client.send <- message:
				default:
					close(client.send)
					delete(h.clients, client)
				}
			}

		// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø
		case oldEmail := <-h.profileUpdate:
			mu.Lock()
			newUserData, exists := users[oldEmail] // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ handlers.go –∏ —Ç–µ–ø–µ—Ä—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á
			mu.Unlock()

			if !exists {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—Ç–∞—Ä–æ–º—É email, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Ç–µ–ø–µ—Ä—å –ø–æ –Ω–æ–≤–æ–º—É.
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.
				// (–≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º, —Ç.–∫. oldEmail –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω. –õ—É—á—à–µ –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º.)
				// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Å—Ç–∞—Ä–æ–º—É Email, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ UserData –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.

				// –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å
				for client := range h.clients {
					// –ú—ã –∏—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ *Client –æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π Email
					if client.user.Email == oldEmail {

						// –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ –Ω–æ–≤–æ–º—É –∏–ª–∏ —Å—Ç–∞—Ä–æ–º—É Email)
						mu.Lock()
						newUserData, exists := users[newUserData.Email] // newUserData.Email —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Email
						mu.Unlock()

						if exists {
							// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ö–∞–±–µ
							client.user = newUserData
							log.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ %s –≤ —á–∞—Ç–µ", client.user.Username)

							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ —á–∞—Ç–µ)
							updateMsg, _ := json.Marshal(map[string]string{
								"type":      "user_update",
								"old_email": oldEmail,
								"new_email": newUserData.Email,
								"username":  newUserData.Username,
								"photo_url": newUserData.PhotoPath,
							})
							h.broadcast <- updateMsg
						}
					}
				}
			}
		}
	}
}

// --- WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
func chatHandler(w http.ResponseWriter, r *http.Request) {
	email, ok := r.Context().Value(userContextKey).(string)
	// ... (–ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π) ...
	if !ok {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}

	mu.Lock()
	user, exists := users[email]
	mu.Unlock()
	if !exists {
		http.Error(w, "User not found", http.StatusUnauthorized)
		return
	}

	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
		return
	}

	client := &Client{
		conn: conn,
		send: make(chan []byte, 256),
		user: user,
	}
	hub.register <- client

	go client.writePump()
	go client.readPump()
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ---
func (c *Client) readPump() {
	defer func() {
		hub.unregister <- c
		c.conn.Close()
	}()

	for {
		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
		_, msg, err := c.conn.ReadMessage()
		if err != nil {
			break
		}

		// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (—Ç–∞–∫ –∫–∞–∫ chat.html –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON)
		var incoming map[string]string
		if err := json.Unmarshal(msg, &incoming); err != nil {
			// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ JSON, –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
			incoming = map[string]string{"text": string(msg)}
		}

		message := Message{
			Username:  c.user.Username,
			PhotoURL:  c.user.PhotoPath,
			Text:      incoming["text"],
			Timestamp: time.Now().Format("15:04"),
			Type:      "chat", // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
		}

		jsonMsg, _ := json.Marshal(message)
		hub.broadcast <- jsonMsg
	}
}

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É ---
func (c *Client) writePump() {
	// ... (–ª–æ–≥–∏–∫–∞ writePump –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π) ...
	defer c.conn.Close()
	for message := range c.send {
		err := c.conn.WriteMessage(websocket.TextMessage, message)
		if err != nil {
			break
		}
	}
}

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ---
func init() {
	go hub.run()
	http.HandleFunc("/ws", authMiddleware(chatHandler))
	fmt.Println("üí¨ WebSocket —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ws://localhost:8080/ws")
}
