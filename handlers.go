package main

import (
	// –î–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"time"

	"golang.org/x/crypto/bcrypt"
)

const MAX_UPLOAD_SIZE = 10 << 20 // 10 MB

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

func generateSessionID() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API ---

// registerHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ.
func registerHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	// 1. –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º—ã
	if err := r.ParseMultipartForm(MAX_UPLOAD_SIZE); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: %v", err)
		http.Error(w, fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ %d MB", MAX_UPLOAD_SIZE/1048576), http.StatusBadRequest)
		return
	}

	username := r.FormValue("username")
	password := r.FormValue("password")
	email := r.FormValue("email") // –ò—Å–ø–æ–ª—å–∑—É–µ–º email

	if username == "" || password == "" || email == "" {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"message": "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", "status": "error"})
		return
	}

	mu.Lock()
	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å –∫–ª—é—á
	if _, exists := users[email]; exists {
		mu.Unlock()
		w.WriteHeader(http.StatusConflict)
		json.NewEncoder(w).Encode(map[string]string{"message": "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è", "status": "error"})
		return
	}

	// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ª–æ–≥–∏–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
	var photoPath string
	file, handler, err := r.FormFile("profile_photo")

	if err == nil {
		defer file.Close()

		uploadDir := filepath.Join("static", "uploads")
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
		uniqueFileName := fmt.Sprintf("%s_%d%s", username, time.Now().Unix(), filepath.Ext(handler.Filename))
		fullPath := filepath.Join(uploadDir, uniqueFileName)
		photoPath = "/uploads/" + uniqueFileName

		dst, createErr := os.Create(fullPath)
		if createErr != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ: %v. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ.", createErr)
		} else {
			defer dst.Close()
			if _, copyErr := io.Copy(dst, file); copyErr != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ.", copyErr)
			} else {
				log.Printf("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", fullPath)
			}
		}

	} else if err != http.ErrMissingFile {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
		mu.Unlock()
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞", http.StatusInternalServerError)
		return
	}

	// 3. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	hashedPasswordBytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: %v", err)
		mu.Unlock()
		http.Error(w, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É email
	users[email] = UserData{
		Username:       username,
		Email:          email,
		HashedPassword: string(hashedPasswordBytes),
		PhotoPath:      photoPath,
	}
	mu.Unlock()

	log.Printf("‚úÖ –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù: %s (Email: %s, –§–æ—Ç–æ: %s)", username, email, photoPath)

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.", "status": "success"})
}

// loginHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫–∏.
func loginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	var creds UserCredentials
	if err := json.NewDecoder(r.Body).Decode(&creds); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email, –∞ –Ω–µ username
	if creds.Email == "" || creds.Password == "" {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	mu.Lock()
	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Email
	userData, exists := users[creds.Email]
	mu.Unlock()

	if !exists {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	err := bcrypt.CompareHashAndPassword([]byte(userData.HashedPassword), []byte(creds.Password))
	if err != nil {
		log.Printf("‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è %s", creds.Email)
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –∫—É–∫–µ
	cookie := http.Cookie{
		Name:     "session_username", // –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–æ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç email)
		Value:    creds.Email,        // –•—Ä–∞–Ω–∏–º Email
		Expires:  time.Now().Add(24 * time.Hour),
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
	}
	http.SetCookie(w, &cookie)

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫—É–∫–∏.", userData.Username)

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "status": "success"})
}

// userHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏).
func userHandler(w http.ResponseWriter, r *http.Request) {
	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	email := r.Context().Value(userContextKey).(string)

	mu.Lock()
	// –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	userData, exists := users[email]
	mu.Unlock()

	if !exists {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ email)", "status": "error"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è PhotoPath
	response := map[string]string{
		"username":  userData.Username,
		"email":     userData.Email,
		"photo_url": userData.PhotoPath,
		"status":    "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// logoutHandler —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫–∏ (–ª–æ–≥–∏–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è).
func logoutHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	expiredCookie := http.Cookie{
		Name:     "session_username",
		Value:    "",
		Expires:  time.Unix(0, 0),
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
	}
	http.SetCookie(w, &expiredCookie)

	log.Printf("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª.")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", "status": "success"})
}

// =======================================================================
// ‚úÖ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø
// =======================================================================

func updateProfileHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	// 1. –ü–æ–ª—É—á–∞–µ–º email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	oldEmail := r.Context().Value(userContextKey).(string)

	// 2. –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º—ã (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ 10 MB)
	if err := r.ParseMultipartForm(MAX_UPLOAD_SIZE); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
		http.Error(w, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
	newUsername := r.FormValue("username") // –ò–º—è –∏ –§–∞–º–∏–ª–∏—è, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤ JS
	newEmail := r.FormValue("email")
	newPassword := r.FormValue("new_password") // –ü–∞—Ä–æ–ª—å

	if newUsername == "" || newEmail == "" {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ò–º—è –∏ Email –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏", "status": "error"})
		return
	}

	mu.Lock()
	defer mu.Unlock()

	userData, exists := users[oldEmail]
	if !exists {
		w.WriteHeader(http.StatusNotFound)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "status": "error"})
		return
	}

	// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	var newPhotoPath = userData.PhotoPath // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	file, handler, err := r.FormFile("profile_photo")

	if err == nil {
		defer file.Close()

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Å–∫–∞
		if userData.PhotoPath != "" && userData.PhotoPath != newPhotoPath {
			oldFilePath := filepath.Join("static", userData.PhotoPath)
			if oldFilePath[0] == '/' {
				oldFilePath = oldFilePath[1:] // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª—ç—à
			}
			os.Remove(oldFilePath)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
		uploadDir := filepath.Join("static", "uploads")
		uniqueFileName := fmt.Sprintf("%s_%d%s", newUsername, time.Now().Unix(), filepath.Ext(handler.Filename))
		fullPath := filepath.Join(uploadDir, uniqueFileName)
		newPhotoPath = "/uploads/" + uniqueFileName

		dst, createErr := os.Create(fullPath)
		if createErr != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: %v", createErr)
		} else {
			defer dst.Close()
			if _, copyErr := io.Copy(dst, file); copyErr != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: %v", copyErr)
			} else {
				log.Printf("‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", fullPath)
			}
		}
	} else if err != http.ErrMissingFile {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞", http.StatusInternalServerError)
		return
	}

	// 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
	hashedPassword := userData.HashedPassword
	if newPassword != "" {
		hashedPasswordBytes, err := bcrypt.GenerateFromPassword([]byte(newPassword), bcrypt.DefaultCost)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: %v", err)
			http.Error(w, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏", http.StatusInternalServerError)
			return
		}
		hashedPassword = string(hashedPasswordBytes)
	}

	// 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
	updatedData := UserData{
		Username:       newUsername,
		Email:          newEmail,
		HashedPassword: hashedPassword,
		PhotoPath:      newPhotoPath,
	}

	// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Email (–ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢)
	if oldEmail != newEmail {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π email (–¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
		if _, exists := users[newEmail]; exists {
			w.WriteHeader(http.StatusConflict)
			json.NewEncoder(w).Encode(map[string]string{"message": "–ù–æ–≤—ã–π Email —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "status": "error"})
			return
		}

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –Ω–æ–≤—ã–º email
		delete(users, oldEmail)
		users[newEmail] = updatedData
		log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ–±–Ω–æ–≤–∏–ª Email —Å %s –Ω–∞ %s", newUsername, oldEmail, newEmail)

		// 7. –ï—Å–ª–∏ Email –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫—É
		cookie := http.Cookie{
			Name:     "session_username",
			Value:    newEmail,
			Expires:  time.Now().Add(24 * time.Hour),
			HttpOnly: true,
			Secure:   false,
			SameSite: http.SameSiteLaxMode,
			Path:     "/",
		}
		http.SetCookie(w, &cookie)

	} else {
		// Email –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
		users[oldEmail] = updatedData
	}

	log.Printf("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. (Email: %s)", updatedData.Username, updatedData.Email)

	if oldEmail != updatedData.Email || oldEmail == updatedData.Email {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º oldEmail, —á—Ç–æ–±—ã —Ö–∞–± –º–æ–≥ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —ç—Ç–æ—Ç email –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
		hub.profileUpdate <- oldEmail
	}

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{
		"message":   "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
		"status":    "success",
		"new_email": updatedData.Email, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π email (–¥–ª—è JS)
	})
}
