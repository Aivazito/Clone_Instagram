package main

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io" // üöÄ –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
	"log"
	"net/http"
	"os"            // üöÄ –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
	"path/filepath" // üöÄ –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
	"sync"
	"time"

	"golang.org/x/crypto/bcrypt"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type UserData struct {
	Email          string
	HashedPassword string
	Username       string // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
	PhotoPath      string // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
}

// UserCredentials –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è login, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è register
type UserCredentials struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ middleware
type contextKey string

const userContextKey contextKey = "username"

// –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
var (
	users = make(map[string]UserData)
	mu    sync.Mutex
)

// -------------------------
// Middleware –∏ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
// -------------------------

func authMiddleware(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		cookie, err := r.Cookie("session_username")
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", "status": "error"})
			return
		}

		username := cookie.Value
		ctx := context.WithValue(r.Context(), userContextKey, username)
		next.ServeHTTP(w, r.WithContext(ctx))
	}
}

func generateSessionID() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

// -------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
// -------------------------

func registerHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	// 1. –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ (10 MB)
	const MAX_UPLOAD_SIZE = 10 << 20 // 10 MB
	if err := r.ParseMultipartForm(MAX_UPLOAD_SIZE); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: %v", err)
		http.Error(w, fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ %d MB", MAX_UPLOAD_SIZE/1048576), http.StatusBadRequest)
		return
	}

	// 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ r.FormValue()
	username := r.FormValue("username")
	password := r.FormValue("password")
	email := r.FormValue("email")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
	if username == "" || password == "" || email == "" {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"message": "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", "status": "error"})
		return
	}

	mu.Lock()
	if _, exists := users[username]; exists {
		mu.Unlock()
		w.WriteHeader(http.StatusConflict)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ", "status": "error"})
		return
	}
	// –ù–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	var photoPath string
	file, handler, err := r.FormFile("profile_photo") // "profile_photo" - –∞—Ç—Ä–∏–±—É—Ç 'name' –∏–∑ HTML

	if err == nil {
		// –§–∞–π–ª –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
		defer file.Close()

		// 3.1. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		// –í–ê–ñ–ù–û: 'uploads' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (../uploads)
		uploadDir := filepath.Join("..", "uploads")
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		uniqueFileName := fmt.Sprintf("%s_%d%s", username, time.Now().Unix(), filepath.Ext(handler.Filename))
		fullPath := filepath.Join(uploadDir, uniqueFileName)
		photoPath = "/uploads/" + uniqueFileName // –ü—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ HTTP

		// 3.2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
		dst, createErr := os.Create(fullPath)
		if createErr != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ: %v", createErr)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ
		} else {
			defer dst.Close()
			if _, copyErr := io.Copy(dst, file); copyErr != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", copyErr)
			} else {
				log.Printf("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", fullPath)
			}
		}

	} else if err != http.ErrMissingFile {
		// –û—à–∏–±–∫–∞, –æ—Ç–ª–∏—á–Ω–∞—è –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
		mu.Unlock()
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞", http.StatusInternalServerError)
		return
	}

	// 4. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	hashedPasswordBytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: %v", err)
		mu.Unlock()
		http.Error(w, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	// 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
	users[username] = UserData{
		Username:       username,
		Email:          email,
		HashedPassword: string(hashedPasswordBytes),
		PhotoPath:      photoPath, // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
	}
	mu.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏

	log.Printf("‚úÖ –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù: %s (–§–æ—Ç–æ: %s)", username, photoPath)

	response := map[string]string{
		"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.",
		"status":  "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// loginHandler (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func loginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	var creds UserCredentials
	if err := json.NewDecoder(r.Body).Decode(&creds); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	if creds.Username == "" || creds.Password == "" {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	mu.Lock()
	userData, exists := users[creds.Username]
	mu.Unlock()

	if !exists {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	err := bcrypt.CompareHashAndPassword([]byte(userData.HashedPassword), []byte(creds.Password))
	if err != nil {
		log.Printf("‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è %s", creds.Username)
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	cookie := http.Cookie{
		Name:     "session_username",
		Value:    creds.Username,
		Expires:  time.Now().Add(24 * time.Hour),
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
	}
	http.SetCookie(w, &cookie)

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫—É–∫–∏.", creds.Username)

	response := map[string]string{
		"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
		"status":  "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// userHandler (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ)
func userHandler(w http.ResponseWriter, r *http.Request) {
	username := r.Context().Value(userContextKey).(string)

	mu.Lock()
	userData, exists := users[username]
	mu.Unlock()

	if !exists {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "status": "error"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è PhotoPath!)
	response := map[string]string{
		"username":  userData.Username,
		"email":     userData.Email,
		"photo_url": userData.PhotoPath, // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
		"status":    "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// logoutHandler (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func logoutHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	expiredCookie := http.Cookie{
		Name:     "session_username",
		Value:    "",
		Expires:  time.Unix(0, 0),
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
	}
	http.SetCookie(w, &expiredCookie)

	log.Printf("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª.")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", "status": "success"})
}

// -------------------------
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (main)
// -------------------------

func main() {
	// 1. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	uploadDir := filepath.Join("..", "uploads")
	if _, err := os.Stat(uploadDir); os.IsNotExist(err) {
		log.Printf("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫: %s", uploadDir)
		if err := os.Mkdir(uploadDir, 0755); err != nil {
			log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫: %v", err)
		}
	}

	// --- –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç (/)
	http.Handle("/", http.FileServer(http.Dir("../templates")))
	http.Handle("/templates/", http.StripPrefix("/templates/", http.FileServer(http.Dir("../templates"))))
	http.Handle("/js/", http.StripPrefix("/js/", http.FileServer(http.Dir("../js"))))

	// 2. ‚úÖ –ù–û–í–ê–Ø –î–ò–†–ï–ö–¢–ò–í–ê: –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –ø–∞–ø–∫—É /uploads/ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
	http.Handle("/uploads/", http.StripPrefix("/uploads/", http.FileServer(http.Dir(uploadDir))))

	// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API ---
	http.HandleFunc("/register", registerHandler)
	http.HandleFunc("/login", loginHandler)
	http.HandleFunc("/logout", logoutHandler)

	// ‚ú® –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
	http.HandleFunc("/user", authMiddleware(userHandler))

	// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ", err)
	}
}
