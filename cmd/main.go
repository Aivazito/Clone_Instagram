package main

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"golang.org/x/crypto/bcrypt"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type UserData struct {
	Email          string
	HashedPassword string
	Username       string // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
}

type UserCredentials struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ middleware
type contextKey string

const userContextKey contextKey = "username"

// –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
var (
	// users - –ö–ª—é—á: Username (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π), –ó–Ω–∞—á–µ–Ω–∏–µ: UserData
	users = make(map[string]UserData)
	mu    sync.Mutex
)

// -------------------------
// Middleware
// -------------------------

// authMiddleware –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—É–∫–∏ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
func authMiddleware(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		cookie, err := r.Cookie("session_username")
		if err != nil {
			// –ï—Å–ª–∏ –∫—É–∫–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 401
			w.WriteHeader(http.StatusUnauthorized)
			json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", "status": "error"})
			return
		}

		username := cookie.Value

		// –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
		ctx := context.WithValue(r.Context(), userContextKey, username)

		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
		next.ServeHTTP(w, r.WithContext(ctx))
	}
}

// -------------------------
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// -------------------------

func generateSessionID() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.StdEncoding.EncodeToString(b)
}

// -------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
// -------------------------

func registerHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	var creds UserCredentials
	if err := json.NewDecoder(r.Body).Decode(&creds); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	if creds.Username == "" || creds.Password == "" || creds.Email == "" {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"message": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "status": "error"})
		return
	}

	mu.Lock()
	defer mu.Unlock() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É

	if _, exists := users[creds.Username]; exists {
		w.WriteHeader(http.StatusConflict)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ", "status": "error"})
		return
	}

	// 1. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	hashedPasswordBytes, err := bcrypt.GenerateFromPassword([]byte(creds.Password), bcrypt.DefaultCost)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: %v", err)
		http.Error(w, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
		return
	}

	// 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	users[creds.Username] = UserData{
		Username:       creds.Username,
		Email:          creds.Email,
		HashedPassword: string(hashedPasswordBytes),
	}

	log.Printf("‚úÖ –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù: %s", creds.Username)

	response := map[string]string{
		"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.",
		"status":  "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

func loginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")

	var creds UserCredentials
	if err := json.NewDecoder(r.Body).Decode(&creds); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadRequest)
		return
	}

	if creds.Username == "" || creds.Password == "" {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	mu.Lock()
	userData, exists := users[creds.Username]
	mu.Unlock()

	if !exists {
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	// 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	err := bcrypt.CompareHashAndPassword([]byte(userData.HashedPassword), []byte(creds.Password))
	if err != nil {
		log.Printf("‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è %s", creds.Username)
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "status": "error"})
		return
	}

	// 2. –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ —Å–µ—Å—Å–∏–∏
	cookie := http.Cookie{
		Name:     "session_username",
		Value:    creds.Username,
		Expires:  time.Now().Add(24 * time.Hour),
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
	}
	http.SetCookie(w, &cookie)

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫—É–∫–∏.", creds.Username)

	response := map[string]string{
		"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
		"status":  "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

func userHandler(w http.ResponseWriter, r *http.Request) {
	// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—É–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ authMiddleware
	username := r.Context().Value(userContextKey).(string)

	mu.Lock()
	userData, exists := users[username]
	mu.Unlock()

	if !exists {
		// –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –∫—É–∫–∏ –≤–µ—Ä–Ω—ã–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "status": "error"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ!)
	response := map[string]string{
		"username": userData.Username,
		"email":    userData.Email,
		"status":   "success",
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

func logoutHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST", http.StatusMethodNotAllowed)
		return
	}
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è
	expiredCookie := http.Cookie{
		Name:     "session_username",
		Value:    "",
		Expires:  time.Unix(0, 0),
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
	}
	http.SetCookie(w, &expiredCookie)

	log.Printf("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª.")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", "status": "success"})
}

// -------------------------
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (main)
// -------------------------

func main() {
	// --- –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
	// –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ main.go –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 'cmd/', –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ: '../'

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç (/), —á—Ç–æ–±—ã http://localhost:8080/ –æ—Ç–∫—Ä—ã–≤–∞–ª templates/index.html
	http.Handle("/", http.FileServer(http.Dir("../templates")))

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –ø–∞–ø–∫—É /templates/ –¥–ª—è —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ <a href="/templates/reg.html">
	http.Handle("/templates/", http.StripPrefix("/templates/", http.FileServer(http.Dir("../templates"))))

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –ø–∞–ø–∫—É /js/ –¥–ª—è <script src="/js/app.js">
	http.Handle("/js/", http.StripPrefix("/js/", http.FileServer(http.Dir("../js"))))

	// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API ---
	http.HandleFunc("/register", registerHandler)
	http.HandleFunc("/login", loginHandler)
	http.HandleFunc("/logout", logoutHandler)

	// ‚ú® –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
	http.HandleFunc("/user", authMiddleware(userHandler))

	// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ", err)
	}
}
